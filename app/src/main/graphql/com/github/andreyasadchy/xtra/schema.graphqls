type Query {
  games(first: Int, after: Cursor, options: GameOptions): GameConnection
  game(id: ID, name: String): Game
  searchCategories(query: String!, first: Int, after: Cursor): SearchCategoriesConnection
  searchFor(userQuery: String!, platform: String!, target: SearchForTarget): SearchFor
  searchStreams(userQuery: String!, first: Int, after: Cursor): SearchStreamConnection
  searchUsers(userQuery: String!, first: Int, after: Cursor): SearchUserConnection
  streams(first: Int, after: Cursor, options: StreamOptions): StreamConnection
  user(id: ID, login: String, lookupType: UserLookupType): User
  users(ids: [ID!], logins: [String!]): [User]
  video(id: ID): Video
}

type Broadcast {
  startedAt: Time
}

type BroadcastSettings {
  title: String
}

type CheerInfo {
  emotes: [Cheermote]
}

type Cheermote {
  prefix: String
  tiers: [CheermoteTier]
}

type CheermoteImage {
  url: String
}

type CheermoteTier {
  bits: Int
  color: String
  images(isAnimated: Boolean, dpiScale: Float): [CheermoteImage]
}

type Clip {
  broadcaster: User
  createdAt: Time
  durationSeconds: Int
  game: Game
  id: ID
  slug: String
  thumbnailURL: String
  title: String
  video: Video
  videoOffsetSeconds: Int
  viewCount: Int
}

type ClipConnection {
  edges: [ClipEdge]
  pageInfo: PageInfo
}

type ClipEdge {
  cursor: Cursor
  node: Clip
}

type Emote {
  id: ID
  owner: User
  setID: ID
}

type EmoteSet {
  emotes: [Emote]
}

type Follow {
  followedAt: Time
}

type FollowConnection {
  edges: [FollowEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type FollowedGameConnection {
  nodes: [Game]
}

type FollowEdge {
  cursor: Cursor
  followedAt: Time
  node: User
}

type FollowedLiveUserConnection {
  edges: [FollowedLiveUserEdge]
  pageInfo: PageInfo
}

type FollowedLiveUserEdge {
  cursor: Cursor
  node: User
}

type FollowerConnection {
  totalCount: Int
}

type Game {
  boxArtURL(width: Int, height: Int): String
  broadcastersCount: Int
  clips(first: Int, after: Cursor, criteria: GameClipsInput): ClipConnection
  displayName: String
  id: ID
  streams(first: Int, after: Cursor, options: GameStreamOptions): StreamConnection
  tags(tagType: TagType!): [Tag!]
  videos(first: Int, after: Cursor, languages: [String!], types: [BroadcastType!], sort: VideoSort): VideoConnection
  viewersCount: Int
}

type GameConnection {
  edges: [GameEdge]
  pageInfo: PageInfo
}

type GameEdge {
  cursor: Cursor
  node: Game
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type SearchCategoriesConnection {
  edges: [SearchCategoriesEdge!]
  pageInfo: PageInfo
}

type SearchCategoriesEdge {
  cursor: Cursor
  node: Game
}

type SearchFor {
  channels: SearchForResultUsers
  games: SearchForResultGames
  videos: SearchForResultVideos
}

type SearchForResultGames {
  cursor: String
  items: [Game!]
  pageInfo: PageInfo
}

type SearchForResultUsers {
  cursor: String
  items: [User!]
  pageInfo: PageInfo
}

type SearchForResultVideos {
  cursor: String
  items: [Video!]
  pageInfo: PageInfo
}

type SearchStreamConnection {
  edges: [SearchStreamEdge!]
  pageInfo: PageInfo
}

type SearchStreamEdge {
  cursor: Cursor
  node: Stream
}

type SearchUserConnection {
  edges: [SearchUserEdge!]
  pageInfo: PageInfo
}

type SearchUserEdge {
  cursor: Cursor
  node: User
}

type Stream {
  broadcaster: User
  createdAt: Time
  game: Game
  id: ID
  previewImageURL: String
  tags: [Tag!]
  title: String
  type: String
  viewersCount: Int
}

type StreamConnection {
  edges: [StreamEdge]
  pageInfo: PageInfo
}

type StreamEdge {
  cursor: Cursor
  node: Stream
}

type Tag {
  id: ID
  localizedName: String
  scope: TagScope
}

type User {
  bannerImageURL: String
  broadcastSettings: BroadcastSettings,
  cheer: CheerInfo
  clips(first: Int, after: Cursor, criteria: UserClipsInput): ClipConnection
  createdAt: Time
  description: String
  displayName: String
  emoteSets: [EmoteSet!]
  follow(targetID: ID, targetLogin: String): Follow
  followedGames(first: Int, type: FollowedGamesType): FollowedGameConnection
  followedLiveUsers(first: Int, after: Cursor, sort: StreamSort): FollowedLiveUserConnection
  followedVideos(first: Int, after: Cursor, languages: [String!], types: [BroadcastType!], sort: VideoSort): VideoConnection
  followers: FollowerConnection
  follows(first: Int, after: Cursor, order: SortOrder): FollowConnection
  hosting: User
  id: ID
  login: String
  lastBroadcast: Broadcast
  profileImageURL(width: Int): String
  profileViewCount: Int
  roles: UserRoles
  stream: Stream
  videos(first: Int, after: Cursor, types: [BroadcastType!], sort: VideoSort): VideoConnection
}

type UserRoles {
  isAffiliate: Boolean
  isExtensionsDeveloper: Boolean
  isGlobalMod: Boolean
  isPartner: Boolean
  isSiteAdmin: Boolean
  isStaff: Boolean
}

type Video {
  broadcastType: BroadcastType
  contentTags: [Tag!]
  createdAt: Time
  game: Game
  id: ID
  lengthSeconds: Int
  owner: User
  previewThumbnailURL: String
  title: String
  viewCount: Int
}

type VideoConnection {
  edges: [VideoEdge]
  pageInfo: PageInfo
}

type VideoEdge {
  cursor: Cursor
  node: Video
}

input GameClipsInput {
  languages: [Language!]
  period: ClipsPeriod
  sort: ClipsSort
}

input GameOptions {
  tags: [String!]
}

input GameStreamOptions {
  sort: StreamSort
  tags: [String!]
}

input SearchForTarget {
  cursor: String
  index: SearchIndex
  limit: Int
}

input StreamOptions {
  sort: StreamSort
  tags: [String!]
}

input UserClipsInput {
  period: ClipsPeriod
  sort: ClipsSort
}

enum BroadcastType {
  ARCHIVE
  HIGHLIGHT
  UPLOAD
  PREMIERE_UPLOAD
  PAST_PREMIERE
}

enum ClipsPeriod {
  LAST_DAY
  LAST_WEEK
  LAST_MONTH
  ALL_TIME
}

enum ClipsSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  VIEWS_ASC
  VIEWS_DESC
  TRENDING
}

enum FollowedGamesType {
  LIVE
  ALL
}

enum Language {
  AR
  ASL
  BG
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  FI
  FR
  HI
  HU
  ID
  IT
  JA
  KO
  MS
  NL
  NO
  OTHER
  PL
  PT
  RO
  RU
  SK
  SV
  TH
  TL
  TR
  UK
  VI
  ZH
  ZH_HK
}

enum SearchIndex {
  GAME
  VOD
  CHANNEL
}

enum SortOrder {
  ASC
  DESC
}

enum StreamSort {
  VIEWER_COUNT
  VIEWER_COUNT_ASC
  RECENT
  RELEVANCE
}

enum TagScope {
  ALL
  CATEGORY
}

enum TagType {
  CONTENT
  TOP
}

enum UserLookupType {
  ACTIVE
  ALL
}

enum VideoSort {
  TIME
  TIME_ASC
  VIEWS
}

scalar Cursor
scalar ID
scalar Time

schema {
  query: Query
}
